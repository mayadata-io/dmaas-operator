/*
Copyright 2020 The MayaData Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    https://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package dmaasbackup

import (
	"time"

	velerov1api "github.com/vmware-tanzu/velero/pkg/apis/velero/v1"
	velerobuilder "github.com/vmware-tanzu/velero/pkg/builder"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"github.com/mayadata-io/dmaas-operator/pkg/apis/mayadata.io/v1alpha1"
	"github.com/pkg/errors"
	"github.com/robfig/cron"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
)

const (
	// dmaasScheduleSuffix suffix for schedule name generated by dmaas operator
	dmaasScheduleSuffix = "dmaas"
)

func (d *dmaasBackup) processSchedule(obj *v1alpha1.DMaaSBackup) error {
	// check if crontime is mentioned
	if obj.Spec.PeriodicFullBackupCfg.CronTime == "" {
		return d.processNonFullBackupSchedule(obj)
	}

	d.logger.Debug("Processing fullbackup")

	cr, err := cron.ParseStandard(obj.Spec.PeriodicFullBackupCfg.CronTime)
	if err != nil {
		return errors.Wrapf(err, "failed to parse cronTime")
	}

	activeSchedule := getActiveVeleroSchedule(obj)

	isDue, nextDue := getNextDue(cr, activeSchedule, d.clock.Now())
	if isDue {
		d.logger.Debug("Creating full backup")

		// before creating a new schedule, we will delete the old schedule
		// upon successful deletion we will create a new schedule
		if activeSchedule != nil {
			err = d.scheduleClient.Delete(
				activeSchedule.ScheduleName,
				&metav1.DeleteOptions{},
			)
			if err != nil {
				if !apierrors.IsNotFound(err) {
					d.logger.WithError(err).
						Errorf("failed to delete schedule=%s", activeSchedule.ScheduleName)
					return errors.Wrapf(err,
						"failed to delete schedule=%s", activeSchedule.ScheduleName)
				}
			}
			activeSchedule.Status = v1alpha1.Deleted
			d.logger.Infof("Schedule=%s deleted", activeSchedule.ScheduleName)
		}

		// create a new schedule
		newSchedule, err := d.createSchedule(obj)
		if err != nil {
			d.logger.WithError(err).Errorf("failed to create new schedule")
			return err
		}
		appendVeleroSchedule(obj, newSchedule)
		d.logger.Infof("Schedule=%s created", newSchedule.Name)
		return nil
	}

	d.logger.Debugf("Full Backup is not due, next due after %s", nextDue.String())
	return nil
}

func getNextDue(cr cron.Schedule, schedule *v1alpha1.VeleroScheduleDetails, now time.Time) (bool, time.Duration) {
	var lastSync time.Time
	if schedule != nil && schedule.CreationTimestamp != nil {
		lastSync = schedule.CreationTimestamp.Time
	}

	nextSync := cr.Next(lastSync)
	return now.After(nextSync), nextSync.Sub(lastSync)
}

func (d *dmaasBackup) createSchedule(dbkp *v1alpha1.DMaaSBackup) (*velerov1api.Schedule, error) {
	name := d.generateScheduleName(*dbkp)
	scheduleObj := velerobuilder.ForSchedule(d.velerons, name).
		Template(dbkp.Spec.VeleroScheduleSpec.Template).
		CronSchedule(dbkp.Spec.VeleroScheduleSpec.Schedule).
		Result()

	return d.scheduleClient.Create(scheduleObj)
}

func (d *dmaasBackup) createBackup(dbkp *v1alpha1.DMaaSBackup) (*velerov1api.Backup, error) {
	name := d.generateBackupName(*dbkp)
	backupObj := velerobuilder.ForBackup(d.velerons, name).
		FromSchedule(&velerov1api.Schedule{
			ObjectMeta: metav1.ObjectMeta{
				Namespace: d.velerons,
				Name:      name,
			},
			Spec: velerov1api.ScheduleSpec{
				Template: dbkp.Spec.VeleroScheduleSpec.Template,
			},
		}).
		Result()

	return d.backupClient.Create(backupObj)
}

func (d *dmaasBackup) generateScheduleName(dbkp v1alpha1.DMaaSBackup) string {
	return dbkp.Name + "-" + d.clock.Now().Format("20060102150405") + "-" + dmaasScheduleSuffix
}

func (d *dmaasBackup) generateBackupName(dbkp v1alpha1.DMaaSBackup) string {
	return dbkp.Name + "-" + dmaasScheduleSuffix
}

func (d *dmaasBackup) processNonFullBackupSchedule(dbkp *v1alpha1.DMaaSBackup) error {
	if dbkp.Spec.PeriodicFullBackupCfg.CronTime != "" {
		return nil
	}

	d.logger.Debug("Processing non fullbackup")

	// non full backup schedule can be of two types, schedule or normal backup
	// check for scheduled backup
	if dbkp.Spec.VeleroScheduleSpec.Schedule != "" {
		// dmaasbackup has schedule spec
		// create schedule if not created
		if len(dbkp.Status.VeleroSchedules) == 0 {
			schedule, err := d.createSchedule(dbkp)
			if err != nil {
				d.logger.WithError(err).
					Errorf("failed to create schedule")
				return errors.Wrapf(err, "failed to create schedule")
			}
			// add schedule information to dmaasbackup
			appendVeleroSchedule(dbkp, schedule)
			d.logger.Infof("Schedule=%s created", schedule.Name)
			return nil
		}
		// schedule is already created
		return nil
	}

	// dmaasbackup have information for normal backup
	if dbkp.Status.VeleroBackupName == nil {
		// need to create velero backup
		bkp, err := d.createBackup(dbkp)
		if err != nil {
			d.logger.WithError(err).
				Errorf("failed to create backup")
			return errors.Wrapf(err, "failed to create backup")
		}
		bkpName := bkp.Name
		dbkp.Status.VeleroBackupName = &bkpName
		d.logger.Infof("Backup=%s created", bkpName)
	}

	return nil
}
